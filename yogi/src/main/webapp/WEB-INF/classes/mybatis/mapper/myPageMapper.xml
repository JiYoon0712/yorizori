<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mypage">

	<!-- 템플릿 -->

	<!-- 주소록 저장 -->
	<insert id="insertAddr"
		parameterType="com.sp.yogi.mypage.MyPage">
		INSERT INTO addressBook (addressNum, userId, zip, addr1,
		addr2)
		VALUES (addr_seq.nextval, #{userId}, #{zip}, #{addr1}, #{addr2})
	</insert>


	<!-- 주소록 삭제 -->
	<delete id="deleteAddr" parameterType="com.sp.yogi.home.Home">
		DELETE FROM addressBook
		WHERE addressNum = #{addressNum} and userId =
		#{userId}
	</delete>


	<sql id="where-list">
		( INSTR(r.restaurantName, #{keyword}) &gt; 0
		OR INSTR(ob.orderNum, #{keyword}) &gt; 0 )
	</sql>

	<!-- 데이터개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM order_bundle ob
		JOIN member1 m ON ob.userId
		= m.userId
		JOIN restaurant r ON ob.restaurantNum = r.restaurantNum
		<where>
			<if test="keyword != null and keyword!=''  ">
				<include refid="where-list" />
			</if>
			AND ob.userId = #{userId}
		</where>
	</select>

	<!-- 주문 내역 리스트 -->
	<select id="listMyPage" parameterType="map"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT ob.orderNum, r.restaurantName, p.price total_price,
		os.statusName, ob.userId, ob.order_date, ob.restaurantNum, rv.content
		FROM order_bundle ob
		JOIN
		restaurant r ON
		ob.restaurantNum = r.restaurantNum
		JOIN payment p ON
		ob.orderNum =
		p.orderNum
		JOIN order_status os ON ob.orderNum =
		os.orderNum
		LEFT OUTER JOIN review rv ON ob.orderNum =
		rv.orderNum  
		<where>
			<if test="keyword != null and keyword != ''">
				<include refid="where-list" />
			</if>
			AND ob.userId = #{userId}
		</where>
		ORDER BY ob.order_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size}
		ROWS ONLY
	</select>
	
	<!-- 주문 내역 리스트 -->
	<select id="listMyHome" parameterType="map"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT ob.orderNum, r.restaurantName, p.price total_price,
		os.statusName, ob.userId, ob.order_date, ob.restaurantNum, rv.content, m1.userName, m2.email
		FROM order_bundle ob
		JOIN
		restaurant r ON
		ob.restaurantNum = r.restaurantNum
		JOIN payment p ON
		ob.orderNum =
		p.orderNum
		JOIN order_status os ON ob.orderNum =
		os.orderNum
		LEFT OUTER JOIN review rv ON ob.orderNum =
		rv.orderNum
		JOIN member1 m1 ON ob.userId =
		m1.userId
        JOIN member2 m2 ON ob.userId =
		m2.userId  
		ORDER BY ob.order_date DESC
	</select>
	
	<select id="readMyhome" parameterType="String"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT
		m1.userName, m2.email
		FROM
		member1 m1
		INNER
		JOIN member2 m2 ON m1.userId = m2.userId
		WHERE
		m1.userId = #{userId}
	</select>
	
	

	<!-- 주문 내역 상세1 -->
	<select id="orderDetail" parameterType="long"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT oi.orderItemNum,
		oi.orderNum,
		oi.menuNum,
		oi.optionName,
		oi.orderCount,
		oi.menuPrice option_price,
		m.menu,
		m.price menu_price
		FROM
		order_item oi
		INNER JOIN menu1 m ON oi.menuNum = m.menuNum
		WHERE
		oi.orderNum = #{orderNum}
	</select>

	<!-- 주문 내역 상세2 -->
	<select id="orderDetail2" parameterType="long"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT
		ob.orderNum,
		r.restaurantName,
		p.price pay_price,
		p.payMethod,
		ob.addr1,
		ob.addr2,
		ob.tel,
		ob.memo,
		ob.order_date,
		ob.total_price
		FROM
		order_bundle ob
		INNER
		JOIN restaurant r ON
		ob.restaurantNum = r.restaurantNum
		INNER JOIN
		payment p ON ob.orderNum =
		p.orderNum
		WHERE
		ob.orderNum = #{orderNum}
	</select>

	<!-- 리뷰작성 -->
	<insert id="insertReview"
		parameterType="com.sp.yogi.mypage.MyPage">
		INSERT INTO review(orderNum, userId, rating, content,
		imgFileName,
		reg_date, enabled, reply, reply_date, restaurantNum)
		VALUES(#{orderNum}, #{userId}, #{rating}, #{content}, #{imgFileName, jdbcType=VARCHAR},
		SYSDATE, 1, #{reply, jdbcType=VARCHAR}, SYSDATE, #{restaurantNum})
	</insert>
	
	<!-- 리뷰 리스트 -->
	<select id="listReview" parameterType="map"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT orderNum, userId, rating, content, imgFileName, reg_date, enabled
		FROM review
		WHERE
		userId = #{userId}
	</select>

	<update id="reviewUpdate" parameterType="com.sp.yogi.mypage.MyPage">
		UPDATE review SET rating = #{rating}, content=#{content}, imgFileName=#{imgFileName, jdbcType=VARCHAR}, reg_date=SYSDATE
		WHERE orderNum = #{orderNum}
	</update>
	
	<select id="reviewRead" parameterType="long"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT
		orderNum,
		userId,
		rating,
		content,
		imgFileName,
		enabled,reply,
		restaurantNum
		FROM
		review
		WHERE
		ob.orderNum = #{orderNum};
	</select>
	
	<select id="readData" parameterType="long"
		resultType="com.sp.yogi.mypage.MyPage">
		SELECT
		ob.orderNum,
		r.restaurantName,
		r.restaurantNum
		FROM
		order_bundle ob
		INNER
		JOIN restaurant r ON ob.restaurantNum = r.restaurantNum
		WHERE
		ob.orderNum = #{orderNum};
	</select>
	
	<select id="likeList" parameterType="String" resultType="com.sp.yogi.mypage.Like">
	SELECT
    rl.restaurantNum,
    r.restaurantName,
    ri.basePrice,
    NVL(rv.reviewCount, 0) AS reviewCount,
    NVL(rv.rating, 0) AS rating,
    (
        SELECT imageFilename
        FROM restaurantImg rimg
        WHERE rimg.restaurantNum = r.restaurantNum
        AND ROWNUM = 1
    ) AS imageFilename
FROM
    restaurantLike rl
    INNER JOIN restaurant r ON rl.restaurantNum = r.restaurantNum
    INNER JOIN restaurantInfo ri ON r.restaurantNum = ri.restaurantNum
    LEFT JOIN (
        SELECT restaurantNum, COUNT(*) AS reviewCount, AVG(rating) AS rating
        FROM review
        GROUP BY restaurantNum
    ) rv ON r.restaurantNum = rv.restaurantNum
    WHERE userId = #{userId}
	</select>
	
	

</mapper>
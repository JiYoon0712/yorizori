<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ownerOrder">
	
	
	<!-- 업체번호가져오기 -->
	<select id="readResNum" parameterType="String" resultType="com.sp.yogi.owner.order.Order">
	SELECT  r.restaurantNum, restaurantName 
	FROM restaurant r
    JOIN restaurantId id ON r.restaurantNum=id.restaurantNum
	WHERE userId=#{userId}
	</select>
	
	<!-- 가게별 주문 리스트(접수대기) -->
	<select id="orderList" parameterType="Long" resultType="com.sp.yogi.owner.order.Order">
	SELECT ob.orderNum, userId, order_date, addr1, addr2, tel, ob.memo, total_price, r.restaurantNum, restaurantName, statusName
	FROM order_bundle ob
	LEFT JOIN order_status os ON ob.orderNum=os.orderNum
	LEFT JOIN restaurant r ON ob.restaurantNum=r.restaurantNum
	WHERE r.restaurantNum=#{restaurantNum}
	ORDER BY order_date
	</select>
	
	<!-- 가게별 주문 리스트(접수완료) 
	<select id="orderList2" parameterType="Long" resultType="com.sp.yogi.owner.order.Order">
	SELECT ob.orderNum, userId, order_date, addr1, addr2, tel, ob.memo, total_price, restaurantNum, statusName
	FROM order_bundle ob
	LEFT JOIN order_status os ON ob.orderNum=os.orderNum
	WHERE restaurantNum=#{restaurantNum} AND statusName!=1 AND statusName!=5
	</select>
	-->
	
	<!-- 가게별 주문개수 -->
	<select id="orderCount" parameterType="Long" resultType="Integer">
	SELECT NVL(COUNT(*),0) FROM order_bundle
	WHERE restaurantNum=#{restaurantNum}
	</select>
	
	<!-- 주문번호별 메뉴개수 -->
	<select id="menuCount" parameterType="Long" resultType="Integer">
	SELECT NVL(COUNT(*),0) FROM order_item
	WHERE orderNum=#{orderNum}
	</select>
	
	<!-- 주문번호별 주문메뉴내역(선택한 옵션은 어디서 확인 ? ) -->
	<select id="orderMenuList" parameterType="Long" resultType="com.sp.yogi.owner.order.Order">
	SELECT oi.menuNum, menu, orderCount, menuPrice 
	FROM order_item oi
	JOIN menu1 m ON oi.menuNum=m.menuNum
	WHERE orderNum=#{orderNum}
	</select>

	<!-- 주문번호별 주문상세내역 -->
	<select id="orderInfoList" parameterType="Long" resultType="com.sp.yogi.owner.order.Order">
	SELECT orderNum, ob.restaurantNum, restaurantName, ob.userId, userName, nickName, order_date, addr1, addr2, tel, memo 
	FROM order_bundle ob
	JOIN member1 m ON ob.userId=m.userId
	JOIN restaurant r ON ob.restaurantNum=r.restaurantNum
	WHERE orderNum=#{orderNum}
	</select>

	<!-- 주문번호별 결제정보 -->
	<select id="paymentInfo" parameterType="Long" resultType="com.sp.yogi.owner.order.Order">
	SELECT payNum, orderNum, pay_date, payMethod, price, couponNum, state
	FROM payment
	WHERE orderNum=#{orderNum}
	</select>
	
	<!-- 주문상태변경(2:접수) -->
	<update id="updateStatus2" parameterType="Long">
	UPDATE order_status SET statusName=2 
	WHERE orderNum=#{orderNum}
	</update>

	<!-- 주문상태변경(3:배달시작) -->
	<update id="updateStatus3" parameterType="Long">
	UPDATE order_status SET statusName=3 
	WHERE orderNum=#{orderNum}
	</update>

	<!-- 주문상태변경(4:배달완료) -->
	<update id="updateStatus4" parameterType="Long">
	UPDATE order_status SET statusName=4 
	WHERE orderNum=#{orderNum}
	</update>

	<!-- 주문취소(5:취소/memo:취소사유) -->
	<update id="updateStatus5" parameterType="com.sp.yogi.owner.order.Order">
	UPDATE order_status SET statusName=5, memo=#{memo} 
	WHERE orderNum=#{orderNum}
	</update>
	
	<!-- 환불 -->
	<insert id="insertRefund" parameterType="com.sp.yogi.owner.order.Order">
	INSERT INTO refund(payNum, memo) VALUES(#{payNum},#{memo})
	</insert>

</mapper>
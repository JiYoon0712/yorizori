<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="owner">
	<select id="loginOwner" parameterType="String" resultType="com.sp.yogi.owner.Owner">
		SELECT r.restaurantNum, userId, userName, userPwd, reg_date, modify_date, last_login, ri.state openState, failure_cnt, enabled
		FROM restaurantId r 
		LEFT OUTER JOIN restaurantInfo ri ON r.restaurantNum = ri.restaurantNum
 		WHERE userId = #{userId}

	</select>
	
	<update id="updateLastLogin" parameterType="String">
		UPDATE restaurantId SET last_login = SYSDATE, failure_cnt = 0
		WHERE userId=#{userId}
	</update>
	
    <select id="ownerSeq" resultType="Long">
       SELECT restaurantId_seq.NEXTVAL FROM dual 
    </select>

    <insert id="insertOwner" parameterType="com.sp.yogi.owner.Owner">
		INSERT INTO restaurantId(restaurantNum, userId, userName, userPwd, enabled, reg_date, 
								modify_date, failure_cnt, status, reject_cnt, email, tel) 
		VALUES (#{restaurantNum}, #{userId}, #{userName}, #{userPwd}, 1, SYSDATE, SYSDATE, 0, 1, 0, #{email}, #{tel}) 
    </insert>
   
   <select id="todayOrderCount" parameterType="map" resultType="Integer">
       	SELECT count(*)
		FROM order_bundle o
		JOIN payment p ON p.orderNum = o.orderNum
		<where>
			restaurantNum = #{restaurantNum} AND TRUNC(order_date) = TRUNC(SYSDATE) AND state = 1
		</where>
    </select>
    
    <select id="todayOrderSum" parameterType="map" resultType="Integer">
       	SELECT sum(total_price) today_sum
		FROM order_bundle o
		JOIN payment p ON p.orderNum = o.orderNum
		<where>
			restaurantNum = #{restaurantNum} AND TRUNC(order_date) = TRUNC(SYSDATE) AND state = 1
		</where>
    </select>
    
    <select id="reviewRating" parameterType="Long" resultType="Integer">
       	SELECT NVL(SUM(rating),0) sum_rating
		FROM review
		<where>
			restaurantNum = #{restaurantNum}
		</where>
    </select>
    
    <select id="reviewRatingCount" parameterType="Long" resultType="Integer">
       	SELECT NVL(COUNT(*),0) 
		FROM review
		<where>
			restaurantNum = #{restaurantNum}
		</where>
    </select>
   
   <!-- 아이디 있는지 체크 -->
	<select id="readOwner" parameterType="String" resultType="com.sp.yogi.owner.Owner">
		SELECT restaurantNum, userId, userPwd, userName, enabled, reg_date, modify_date, last_login, failure_cnt, status, reject_cnt, email, tel  
		FROM restaurantId WHERE userId=#{userId}
	</select>   
	
	<select id="readOwner2" parameterType="String" resultType="com.sp.yogi.owner.Owner">
		SELECT restaurantNum, userId, userPwd, userName, enabled, reg_date, modify_date, last_login, failure_cnt, status, reject_cnt, email, tel  
		FROM restaurantId 
		WHERE restaurantNum=#{restaurantNum}
	</select>   
	
	<select id="readOwnerEmail" parameterType="String" resultType="com.sp.yogi.owner.Owner">
		SELECT restaurantNum, userId, userPwd, userName, enabled, reg_date, modify_date, last_login, failure_cnt, status, reject_cnt, email, tel  
		FROM restaurantId
		WHERE email = #{email}
	</select>
	
	<!-- 사장님 정보 수정 -->
	<update id="updateOwner" parameterType="com.sp.yogi.owner.Owner">
		UPDATE restaurantId SET userPwd=#{userPwd},userName=#{userName},email=#{email}, 
		tel=#{tel}, modify_date=SYSDATE WHERE userId=#{userId}
	</update>
	
	
	<!-- 가게 정보 -->
	<select id="readRestaurant" parameterType="String" resultType="com.sp.yogi.owner.Owner">
		SELECT ri.restaurantNum, ri.userPwd, ri.userName, email, tel, r.businessNum, r.restaurantName, r.restaurantAddr1, r.restaurantAddr2, r.restaurantTel, r.reg_date, rc.categoryName
		FROM restaurantId ri
		JOIN restaurant r ON ri.restaurantNum = r.restaurantNum
		JOIN res_category rc ON rc.categoryNum = r.categoryNum
		WHERE userId = #{userId}
	</select>  
	
   
    <!-- member 테이블 정보 삭제  -->    
    <delete id="deleteOwner" parameterType="String">
		DELETE FROM restaurantNum WHERE userId=#{userId}
    </delete>
    
    <!-- owner status 확인 -->
    <select id="readStatus" parameterType="String" resultType="Integer">
    	SELECT status FROM restaurantid WHERE userId = #{userId}
    </select>
    
    <!-- open/close 설정 -->
    <update id="openControl" parameterType="map" >
    	UPDATE restaurantInfo SET state = #{state} 
    	<where>
    		restaurantNum = #{restaurantNum}
    	</where>
    </update>
    
    <!-- open state 확인 -->
    <select id="openState" parameterType="Long" resultType="Integer">
    	SELECT state FROM restaurantInfo WHERE restaurantNum = #{restaurantNum}
    </select>
    
    <!-- failure Count 증가 -->
    <update id="updateFailCount" parameterType="String">
    	UPDATE restaurantId SET failure_cnt = failure_cnt + 1 
    	WHERE userId = #{userId}
    </update>
    
    <!-- fail Count -->
    <select id="failCount" parameterType="String" resultType="int">
    	SELECT failure_cnt FROM restaurantId where userId = #{userId}
    </select>
    
    <!-- 아이디 정지 -->
    <update id="disableMember" parameterType="String">
    	UPDATE restaurantId set enabled = 0, failure_cnt = 0 WHERE userId = #{userId}
    </update>
    
    <!-- fail Count 초기화 -->
    <update id="resetFail" parameterType="String">
    	update restaurantId set failure_cnt = 0 where userId = #{userId}
    </update>
    
    <select id="recentSale" parameterType="Long" resultType="com.sp.yogi.admin.domain.MainDomain">
    	SELECT o.orderNum, restaurantName, o.userId, nickname, total_price, order_date
		FROM order_bundle o
		JOIN member1 m ON m.userId = o.userId
		JOIN payment p ON o.orderNum = p.orderNum
		JOIN restaurantId ri ON o.restaurantNum = ri.restaurantNum
		JOIN restaurant r ON r.restaurantNum = ri.restaurantNum
		WHERE state = 1 AND o.restaurantNum = #{restaurantNum}
		ORDER BY order_date DESC
		FETCH FIRST 10 ROWS ONLY
    </select>

</mapper>
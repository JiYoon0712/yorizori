<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="restaurant">

	<!-- 키워드 -->
	<sql id="where-list">
		<if test="condition=='all' ">
			AND INSTR(restaurantName, #{keyword, jdbcType=VARCHAR}) &gt; 0
		</if>
		<if test="condition=='rank' ">
			AND INSTR(restaurantName, #{keyword, jdbcType=VARCHAR}) &gt; 0 
			ORDER BY rating DESC
		</if>
		<if test="condition=='review' ">
			AND INSTR(restaurantName, #{keyword, jdbcType=VARCHAR}) &gt; 0 
			ORDER BY reviewCount DESC
		</if>
		<if test="condition=='minPrice' ">
			AND INSTR(restaurantName, #{keyword, jdbcType=VARCHAR}) &gt; 0 
			ORDER BY basePrice ASC
		</if>
	</sql>
	
	<sql id="where-list2">
		<if test="condition=='all' ">
		</if>
		<if test="condition=='rank' ">
			ORDER BY rating DESC
		</if>
		<if test="condition=='review' ">
			ORDER BY reviewCount DESC
		</if>
		<if test="condition=='minPrice' ">
			ORDER BY basePrice ASC
		</if>
	</sql>	
	
	<!-- 가게 리스트 / 검색 / 정렬 -->
	<select id="listRestaurant" parameterType="map" resultType="com.sp.yogi.restaurant.Restaurant">
		SELECT ri.restaurantNum, categoryNum ,restaurantName, basePrice, NVL(reviewCount,0) reviewCount, NVL(rating,0) rating, addr addr1, imageFilename
		FROM restaurantId ri 
		JOIN restaurant r ON ri.restaurantNum = r.restaurantNum
		JOIN restaurantInfo info ON info.restaurantNum = ri.restaurantNum
		JOIN deliveryMap d ON d.restaurantNum = ri.restaurantNum
		LEFT OUTER JOIN (
            SELECT imageFilename, restaurantNum
              FROM restaurantImg
              ORDER BY restaurantNum DESC
              FETCH FIRST 1 ROWS ONLY
        ) img ON img.restaurantNum = ri.restaurantNum
		LEFT OUTER JOIN (
		    SELECT COUNT(*) reviewCount, AVG(rating) rating, restaurantNum FROM review WHERE enabled=1 GROUP BY restaurantNum
		) rv ON rv.restaurantNum = ri.restaurantNum
		WHERE info.state = 1 AND ri.status = 3
			  AND INSTR(d.addr,  #{addr1}) &gt; 0 
			 <if test="categoryNum > 0">
			 	 AND categoryNum = #{categoryNum} 
			  </if>
		<if test="keyword!=null and keyword != '' ">
			<include refid="where-list"/>
		</if>
		<if test="keyword==null or keyword == ''">
			<include refid="where-list2"/>
		</if>
	</select>
	
	<!-- 가게 상세 정보 불러오기 -->
	<select id="readRestaurantInfo" parameterType="Long" resultType="com.sp.yogi.restaurant.RestaurantInfo">
      SELECT r.restaurantNum, businessNum, restaurantName, restaurantAddr1, restaurantAddr2, 
     		 restaurantTel, basePrice, openingHour, closingHour, foodInfo, imageFilename
      FROM restaurant r
      JOIN restaurantId ri ON r.restaurantNum = ri.restaurantNum
      JOIN restaurantInfo rf ON ri.restaurantNum = rf.restaurantNum
      LEFT OUTER JOIN (
            SELECT imageFilename, restaurantNum
              FROM restaurantImg
              ORDER BY restaurantNum DESC
              FETCH FIRST 1 ROWS ONLY
        ) img ON img.restaurantNum = ri.restaurantNum
      WHERE r.restaurantNum = #{restaurantNum}
   </select>
	
	<!-- 가게 카테고리 불러오기 -->
	<select id="readCategory" parameterType="long" resultType="com.sp.yogi.restaurant.Category">
		SELECT num, restaurantNum, menuCategory FROM menu WHERE restaurantNum=#{restaurantNum} and enabled=1
	</select>
	
	<!-- 가게 메뉴 불러오기 -->
	<select id="readMenu" parameterType="Long" resultType="com.sp.yogi.restaurant.Menu">
		SELECT menuNum,num,menu,price,imageFilename, stock FROM menu1 WHERE num=#{num}
	</select>
	
	<!-- 가게 옵션 분류 불러오기 -->
	<select id="readOptionGroup" parameterType="Long" resultType="com.sp.yogi.restaurant.Option">
		SELECT distinct option_group optionGroup, menuNum FROM menuOption WHERE menuNum=#{menuNum}
	</select>
	
	<!-- 가게 옵션 분류당 - 옵션 상세 -->
	<select id="readOptionName" parameterType="com.sp.yogi.restaurant.Option" resultType="com.sp.yogi.restaurant.Option">
		SELECT option_name optionName, price from menuOption WHERE menuNum=#{menuNum} AND option_group = #{optionGroup}
	</select>
	
	<!-- 가게 찜 했는지 여부 -->
	<select id="isLike" parameterType="map" resultType="int">
		SELECT COUNT(*) likeCount FROM restaurantLike WHERE userId = #{userId} and restaurantNum = #{restaurantNum}
	</select>
	 
	<!-- 가게 찜 -->
	<insert id="insertLike" parameterType="map">
		INSERT INTO restaurantLike(userId, restaurantNum) VALUES(#{userId} , #{restaurantNum} )
	</insert>	
	
	<!-- 가게 찜 취소 -->
	<delete id="deleteLike" parameterType="map">
	 	DELETE FROM restaurantLike WHERE userId=#{userId} AND restaurantNum=#{restaurantNum}
	</delete>
	
	
	<!-- 배달팁, 메뉴개수, 리뷰개수 -->
	<select id="readRestaurantInfo2" parameterType="map" resultType="com.sp.yogi.restaurant.Restaurant">
		 SELECT
		    (SELECT deliveryFee
		        FROM deliveryMap
		        WHERE restaurantNum = #{restaurantNum} AND addr = #{addr}) AS deliveryFee,
		    (SELECT COUNT(*)
		        FROM menu1
		        JOIN menu ON menu.num = menu1.num
		        WHERE restaurantNum = #{restaurantNum} and enabled=1) AS menuCount,
		    (SELECT COUNT(*)
		        FROM review
		        WHERE restaurantNum = #{restaurantNum}  AND enabled = 1) AS reviewCount
		FROM dual
	</select>
	
	<!-- 리뷰 리스트 -->
	<select id="readReivew" parameterType="Long" resultType="com.sp.yogi.restaurant.Review">
		SELECT nickName, userName, rating star, content, imgFileName, TO_CHAR(r.reg_date,'YYYY-MM-DD') regDate, reply, TO_CHAR(reply_date,'YYYY-MM-DD') replyDate
		FROM review r
		JOIN member1 m ON r.userId = m.userId
		WHERE restaurantNum = #{restaurantNum} AND r.enabled = 1
		ORDER BY r.reg_date DESC
	</select>
	
	<!-- 별점 -->
	<select id="readRating" parameterType="Long" resultType="double">
		SELECT NVL(TRUNC(AVG(rating),1), 0) rating FROM review 
		WHERE restaurantNum = #{restaurantNum} AND enabled=1
	</select>

</mapper>
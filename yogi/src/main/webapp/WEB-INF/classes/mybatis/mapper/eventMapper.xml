<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="event">
	<insert id="insertEvent" parameterType="com.sp.yogi.event.Event">
		INSERT INTO event(eventNum, subject, content, 
			start_date, end_date, enabled, hitCount, imgFileName, expired_date, discount, min_price)
		VALUES (event_seq.NEXTVAL, #{subject}, #{content},
			TO_DATE(#{start_date}, 'YYYY-MM-DD HH24:MI:SS'), 
			TO_DATE(#{end_date}, 'YYYY-MM-DD HH24:MI:SS'),
			#{enabled}, 0, #{imgFileName}, #{expired_date}, #{discount}, #{min_price})
	</insert>

	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(subject, #{keyword}) &gt; 0
		          OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
			<otherwise>
			   ( TO_CHAR(${condition}, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(${condition}, 'YYYY-MM-DD') = #{keyword} )
			</otherwise>
		</choose>
	</sql>
	
	<sql id="period-list">
		<choose>
			<when test="category == 'progress' ">
				( start_date &lt;= SYSDATE  AND end_date &gt; SYSDATE )
			</when>
			<when test="category == 'upcoming' ">
				( start_date &gt;= SYSDATE )
			</when>
			<when test="category == 'ended' ">
				( end_date &lt; SYSDATE )
			</when>
			<when test="category == 'userAll' ">
				(( start_date &lt;= SYSDATE  AND end_date &gt; SYSDATE ) OR ( end_date &lt; SYSDATE ))
			</when>
		</choose>
	</sql>
	
	<!-- 글 개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM event
		<where>
			<if test="enabled != null and enabled == 1">
				enabled = 1
			</if>
			<if test="category != 'all' ">
				AND <include refid="period-list"/>
			</if>
			<if test="keyword!=null and keyword!='' ">
				AND <include refid="where-list"/>
			</if>
		</where>   
	</select>


	<!-- 글리스트 -->
	<select id="listEvent" parameterType="map" resultType="com.sp.yogi.event.Event">
		SELECT e.eventNum, subject, hitCount, enabled, imgFileName,
			   TO_CHAR(start_date,'YYYY-MM-DD HH24:MI') start_date,
			   TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI') end_date, 
			   NVL(applyCount, 0) applyCount
		FROM event e
		
			LEFT OUTER JOIN (
				SELECT eventNum, COUNT(*) applyCount
				FROM participant
				GROUP BY eventNum
			) p ON e.eventNum = p.eventNum
		
		<where>
			<if test="enabled != null and enabled == 1">
				enabled = 1
			</if>
			<if test="category != 'all' ">
				AND <include refid="period-list"/>
			</if>
			<if test="keyword != null and keyword != ''">
				AND <include refid="where-list"/>
			</if>
		</where>
		ORDER BY eventNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 글보기 -->
	<select id="readEvent" parameterType="Long" resultType="com.sp.yogi.event.Event">
		SELECT eventNum, subject, content, 
			TO_CHAR(start_date,'YYYY-MM-DD HH24:MI') start_date,
			TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI') end_date, 
			TO_CHAR(expired_date, 'YYYY-MM-DD HH24:MI') expired_date,
			enabled, hitCount, imgFileName, discount, min_price
		FROM event 
		WHERE eventNum = #{eventNum}
	</select>
	
	<!-- 수정 -->
	<update id="updateEvent" parameterType="com.sp.yogi.event.Event">
		UPDATE event SET subject=#{subject}, content=#{content},
				start_date=TO_DATE(#{start_date}, 'YYYY-MM-DD HH24:MI:SS'), 
				end_date=TO_DATE(#{end_date}, 'YYYY-MM-DD HH24:MI:SS'),
				enabled=#{enabled}, 
				imgFileName=#{imgFileName}, expired_date=#{expired_date}, 
				discount=#{discount}, min_price=#{min_price}
		WHERE eventNum = #{eventNum}
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteEvent" parameterType="Long">
		DELETE FROM event WHERE eventNum = #{eventNum}
	</delete>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Long">
		UPDATE event SET hitCount = hitCount+1 WHERE eventNum = #{eventNum}
	</update>
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadEvent" parameterType="map" resultType="com.sp.yogi.event.Event">
		SELECT eventNum, subject
		FROM event
		<where>
			<if test="enabled != null and enabled == 1">
				enabled = 1
			</if>
			<if test="category != 'all' ">
				AND <include refid="period-list"/>
			</if>
			<if test="keyword != null and keyword != '' ">
				AND <include refid="where-list"/>
			</if>
			AND (eventNum &gt; #{eventNum}) 
			
		</where>
		ORDER BY eventNum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 다음글 -->
	<select id="nextReadEvent" parameterType="map" resultType="com.sp.yogi.event.Event">
		SELECT eventNum, subject
		FROM event
		<where>
			<if test="enabled != null and enabled == 1">
				enabled = 1
			</if>
			<if test="category != 'all' ">
				AND <include refid="period-list"/>
			</if>
			<if test="keyword != null and keyword != '' ">
				AND <include refid="where-list"/>
			</if>
			AND (eventNum &lt; #{eventNum}) 
			
		</where>
		ORDER BY eventNum DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 이벤트 응모 여부 -->
	<select id="readEventTakers" parameterType="map" resultType="com.sp.yogi.event.Event">
		SELECT eventNum, p.userId, userName 
		FROM participant p
		JOIN member1 m ON p.userId = m.userId
		WHERE eventNum = #{eventNum} AND p.userId = #{userId}
	</select>
	
	<!-- 이벤트 응모자 등록 -->
	<insert id="insertEventTakers" parameterType="map">
		INSERT INTO participant(eventNum, userId) VALUES (#{eventNum}, #{userId})
	</insert>
	
	<!-- 이벤트 쿠폰 등록 -->
	<insert id="insertCouponTakers" parameterType="map">
		INSERT INTO coupon(eventNum, couponNum, content, created_date, status, userId) 
			VALUES (#{eventNum}, coupon_seq.NEXTVAL, #{content}, SYSDATE, 1, #{userId})
	</insert>
	
</mapper>